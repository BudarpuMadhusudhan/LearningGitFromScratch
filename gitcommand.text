Why Version Control ??
=================
Have you ever:
● Made a change to code, realised it was a mistake and wanted to revert back?
● Lost code and didn’t have a backup of that code ?
● Had to maintain multiple versions of a product ?
● Wanted to see the difference between two (or more) versions of your code ?
● Wanted to prove that a particular change in code broke application or fixed a application ?
● Wanted to review the history of some code ?
● Wanted to submit a change to someone else's code ?
● Wanted to share your code, or let other people work on your code ?
● Wanted to see how much work is being done, and where, when and by whom ?
● Wanted to experiment with a new feature without interfering with working code ?

In these cases, and no doubt others, a version control system should make your life easier.
Key Points
● Backup
● Collaboration
● Storing Versions
● Restoring Previous Versions
● Understanding What Happened

Version Control / Revision control / Source Control is is a software that helps software developers to work together
and maintain a complete history of their work.

You can think of a version control system ("VCS") as a kind of "database".
It lets you save a snapshot of your complete project at any time you want. When you later take a look at an older snapshot
("version"), your VCS shows you exactly how it differed from the previous one.

A version control system records the changes you make to your project’s files.

This is what version control is about. It's really as simple as it sounds.
Popular VCS
Types of VCS
○ Centralized version control system (CVCS)
○ Ex: CVS, SVN
○ Distributed version control system (DVCS)
○ Ex: Git, Mercurial

Centralized Version Control System (CVCS)
Uses a central server to store all files and enables team collaboration.
But the major drawback of CVCS is its single point of failure, i.e., failure of the central server. Unfortunately, if the central
server goes down for an hour, then during that hour, no one can collaborate at all.

Distributed Version Control System (DVCS)
DVCS does not rely on the central server and that is why you can perform many operations when you are offline. You can
commit changes, create branches, view logs, and perform other operations when you are offline. You require network
connection only to publish your changes and take the latest changes.

How the Typical VCS works
A typical VCS uses something called Two tree architecture, this is what a lot of other VCS use apart from git.
Usually, a VCS works by having two places to store things:
1. Working Copy
2. Repository

These are our two trees, we call them trees because they represent a file structure.
Working copy [CLIENT] is the place where you make your changes.
Whenever you edit something, it is saved in working copy and it is a physically stored in a disk.
Repository [SERVER] is the place where all the version of the files or commits, logs etc is stored. It is also saved in a disk
and has its own set of files.
You cannot however change or get the files in a repository directly, in able to retrieve a specific file from there, you have
to checkout
Checking-out is the process of getting files from repository to your working copy. This is because you can only edit files
when it is on your working copy. When you are done editing the file, you will save it back to the repository by committing
it, so that it can be used by other developers.
Committing is the process of putting back the files from working copy to repository.
Hence, this architecture is called 2 Tree Architecture.
Because you have two tree in there Working Copy and Repository.
The famous VCS with this kind of architecture is Subversion or SVN.
How the Distributed DVCS works
===========================
Unusually, a DVCS works by having three places to store things:
1. Working Copy
2. Staging
3. Repository
As Git uses Distributed version control system, So let’s talk about Git which will give you an understanding of DVCS.
Git was initially designed and developed by Linus Torvalds in 2005 for Linux kernel development. Git is an Open Source
tool.
History
For developing and maintaining Linux Kernel, Linus Torvalds used BitKeeper which is also one of the VCS, and is open
source till 2004.
So instead of depending on other tools, they developed their own VCS.
Just see the wiki of Git.
Git Architecture
Git uses three tree architecture.
Well interestingly Git has the Working Copy and Repository as well but it has added an extra tree Staging in between:
As you can see above, there is a new tree called Staging.
What this is for ?
This is one of the fundamental difference of Git that sets it apart from other VCS, this Staging tree (usually termed as
Staging area) is a place where you prepare all the things that you are going to commit.
In Git, you don't move things directly from your working copy to the repository, you have to stage them first, one of the
main benefits of this is, to break up your working changes into smaller, self-contained pieces.
To stage a file is to prepare it for a commit.
Staging allows you finer control over exactly how you want to approach version control.
Advantages Of Git
===================
Git works on most of OS: Linux, Windows, Solaris and MAC.
Installing Git
● Download Git {git website}
To check if git is available or not use:
# rpm -qa | grep git
# sudo yum install git
# git --version